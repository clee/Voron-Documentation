I"Ç <h1 id="automating-klipper-mcu-updates">Automating Klipper MCU Updates</h1>

<p>This document describes a method to make updating your MCUs to the latest Klipper version easy, especially with multiple
boards.</p>

<h2 id="terminology">Terminology</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Host System</code>: The system where you run the host part of Klipper on, usually on a Raspberry Pi.</li>
  <li><code class="language-plaintext highlighter-rouge">MCU</code>: The board(s) where your microcontroller unit (<code class="language-plaintext highlighter-rouge">MCU</code>) runs on, like the SKR, Octopus or Spider,
but also the RPI itself if you are using SPI for the ADXL345 accelerometer.</li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>Basic knowledge on how to update Klipper on the command line via SSH</li>
  <li>A board which supports <a href="https://www.klipper3d.org/SDCard_Updates.html">flashing the firmware</a> via an SD-Card, which
almost all modern 32-bit controller boards support.</li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>Whenever you update Klipper on your host system, you should also update Klipper on all your MCUs. This is because
Klipper on your host system and Klipper on your MCUs need to use the same communication protocol. If one of them is out
of date, you get an error like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mcu 'mcu': Command format mismatch: endstop_home oid=%c clock=%u sample_ticks=%u sample_count=%c rest_ticks=%u
pin_value=%c trsync_oid=%c trigger_reason=%c vs endstop_home oid=%c clock=%u sample_ticks=%u sample_count=%c
rest_ticks=%u pin_value=%c

This type of error is frequently caused by running an older
version of the firmware on the micro-controller (fix by
recompiling and flashing the firmware).
</code></pre></div></div>

<p>However, MCU updates are often skipped because:</p>
<ul>
  <li>Updating all MCUs is tedious, especially with multiple controller boards</li>
  <li>Error-prone because if different boards are used, <code class="language-plaintext highlighter-rouge">make menuconfig</code> needs to be called multiple times</li>
  <li>Updates are technically only necessary if the communication protocol has changed, often causing the updates to feel
‚Äúunnecessary‚Äù</li>
</ul>

<h2 id="menuconfig-theory">menuconfig Theory</h2>

<p>Klipper uses the <a href="https://en.wikipedia.org/wiki/Menuconfig">menuconfig</a> system, which was originally developed to make
configuring the <a href="https://en.wikipedia.org/wiki/Linux_kernel">Linux Kernel</a> easier. The <code class="language-plaintext highlighter-rouge">menuconfig</code> system is a more
user-friendly way of setting options in the configuration file (usually called <code class="language-plaintext highlighter-rouge">.config</code>).</p>

<p>Because the name of the configuration file does not change between invocations of <code class="language-plaintext highlighter-rouge">make menuconfig</code>, settings done for
one MCU board will overwrite the previous settings in the default <code class="language-plaintext highlighter-rouge">.config</code> file.</p>

<p>Fortunately, the <code class="language-plaintext highlighter-rouge">menuconfig</code> infrastructure supports custom configuration files, so we can easily add one configuration
file for each of our MCUs. This is achieved by passing <code class="language-plaintext highlighter-rouge">KCONFIG_CONFIG=name</code> to the script, where <code class="language-plaintext highlighter-rouge">name</code> is the desired
name of the configuration file instead of <code class="language-plaintext highlighter-rouge">.config</code>.</p>

<p>Note that the <code class="language-plaintext highlighter-rouge">.config</code> file is often not visible because files starting with a dot are treated as hidden files by
Linux/Unix systems. To view the contents of this file, simply type <code class="language-plaintext highlighter-rouge">cat .config</code> in your Klipper directory or use
<code class="language-plaintext highlighter-rouge">ls -all</code> to view all files in the directory.</p>

<p>An example would be:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make clean KCONFIG_CONFIG=config.spider
make menuconfig KCONFIG_CONFIG=config.spider
make KCONFIG_CONFIG=config.spider
</code></pre></div></div>

<p>All the settings would now be stored in the file <code class="language-plaintext highlighter-rouge">config.spider</code>. If you skip the <code class="language-plaintext highlighter-rouge">KCONFIG_CONFIG</code> parameter, the
system would revert to the <code class="language-plaintext highlighter-rouge">.config</code> filename.</p>

<h2 id="flash-sdcard-theory">flash-sdcard Theory</h2>

<p>Usually you would copy the firmware file onto your SD-Card and then restart your board(s), then wait for the board(s)
to flash the new firmware for you. Thanks to Klipper‚Äôs <a href="https://www.klipper3d.org/SDCard_Updates.html">flash-sdcard.sh</a>
script, this can be automated.</p>

<p>In a nutshell, this script places the new firmware file on the card, restarts the board, waits for the new firmware to
be flashed, and then verifies the new firmware. This can be done with a single command after the firmware is compiled:</p>

<p><code class="language-plaintext highlighter-rouge">./scripts/flash-sdcard.sh /dev/ttyACM0 btt-skr-v1.3</code></p>

<p>Note that the serial path and the board parameters need to be adjusted for your particular board, please refer to the
<a href="https://www.klipper3d.org/SDCard_Updates.html">flash-sdcard.sh Documentation</a></p>

<h2 id="full-example">Full Example</h2>

<p>Here is a simple example for my v1.8 where I have a Fysetc Spider and an RPI MCU.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo service klipper stop
cd ~/klipper
git pull

make clean KCONFIG_CONFIG=config.spider
make menuconfig KCONFIG_CONFIG=config.spider
make KCONFIG_CONFIG=config.spider
./scripts/flash-sdcard.sh /dev/ttyAMA0 fysetc-spider-v1

make clean KCONFIG_CONFIG=config.rpi
make menuconfig KCONFIG_CONFIG=config.rpi
make flash KCONFIG_CONFIG=config.rpi

sudo service klipper start
</code></pre></div></div>

<p>You could simply place all the required commands in a text file <code class="language-plaintext highlighter-rouge">update-all.sh</code> within the Klipper directory, and then
run all the above commands by using one single command: <code class="language-plaintext highlighter-rouge">bash update-all.sh</code>.</p>

<p>Note that you still need to watch for errors during the build process!</p>

<h2 id="elegant-example">Elegant Example</h2>

<p>This example adds an input prompt to hit <code class="language-plaintext highlighter-rouge">[Enter]</code> after each step, so it‚Äôs easier to spot errors during the previous
step.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo service klipper stop
cd ~/klipper
git pull

make clean KCONFIG_CONFIG=config.spider
make menuconfig KCONFIG_CONFIG=config.spider
make KCONFIG_CONFIG=config.spider
read -p "Spider firmware built, please check above for any errors. Press [Enter] to continue flashing, or [Ctrl+C] to abort"

./scripts/flash-sdcard.sh /dev/ttyAMA0 fysetc-spider-v1
read -p "Spider firmware flashed, please check above for any errors. Press [Enter] to continue, or [Ctrl+C] to abort"

make clean KCONFIG_CONFIG=config.rpi
make menuconfig KCONFIG_CONFIG=config.rpi

make KCONFIG_CONFIG=config.rpi
read -p "RPi firmware built, please check above for any errors. Press [Enter] to continue flashing, or [Ctrl+C] to abort"
make flash KCONFIG_CONFIG=config.rpi

sudo service klipper start
</code></pre></div></div>

<h2 id="faq">FAQ</h2>

<h3 id="can-i-just-skip-the-menuconfig-line">Can I just skip the menuconfig line?</h3>

<p>You could, but if Klipper decides to add another configuration option during an update, the new option would be missing
from the config file and the build process would complain. Running <code class="language-plaintext highlighter-rouge">make menuconfig</code> ensures that the new option is
added with the defaults.</p>
:ET